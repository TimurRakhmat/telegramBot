from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
import dao
import kb

router = Router()


class AddPlaceStates(StatesGroup):
    content = State()  
    sport = State()
    culture = State()
    night = State()
    check_state = State()  


class CheckVisited(StatesGroup):
    content = State()  
    sport = State()
    culture = State()
    night = State()
    check_state = State()  


@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user = await dao.set_user(tg_id=message.from_user.id,
                          username=message.from_user.username,
                          full_name=message.from_user.full_name)
    greeting = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    if user is None:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"

    await message.answer(greeting, reply_markup=kb.main_kb())


@router.message(F.text == '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π')
async def stop_fsm(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ",
                         reply_markup=kb.main_kb())



@router.callback_query(F.data == 'main_menu')
async def main_menu_process(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
    await call.message.answer(f"–ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}! –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                              reply_markup=kb.main_kb())


@router.message(F.text == 'üìù –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ')
async def start_add_place(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞",
                         reply_markup=kb.stop_fsm())
    await state.set_state(AddPlaceStates.content)


@router.message(F.photo, AddPlaceStates.content)
async def start_questionnaire_process(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await state.update_data(caption=message.text or message.caption)
    await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –æ—Ç 1 –¥–æ 5 –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π/—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö',
                         reply_markup=kb.add_rate_kb())
    await state.set_state(AddPlaceStates.sport)


def getRate(rateSign: str) -> int:
    match rateSign:
        case "1Ô∏è‚É£" : return 1
        case "2Ô∏è‚É£" : return 2
        case "3Ô∏è‚É£" : return 3
        case "4Ô∏è‚É£" : return 4
        case "5Ô∏è‚É£" : return 5

    return 0
 


@router.message(F.text, AddPlaceStates.sport)
async def start_sport_process(message: Message, state: FSMContext):
    if not getRate(message.text):
        await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –æ—Ç 1 –¥–æ 5 –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π/—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö',
                         reply_markup=kb.add_rate_kb())
        return
    
    await state.update_data(sport=getRate(message.text))
    await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –æ—Ç 1 –¥–æ 5 –∫–∞–∫ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –æ—Ç–¥—ã—Ö',
                         reply_markup=kb.add_rate_kb())
    await state.set_state(AddPlaceStates.culture)


@router.message(F.text, AddPlaceStates.culture)
async def start_culture_process(message: Message, state: FSMContext):
    if not getRate(message.text):
        await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –æ—Ç 1 –¥–æ 5 –∫–∞–∫ –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –æ—Ç–¥—ã—Ö',
                         reply_markup=kb.add_rate_kb())
        return
    
    await state.update_data(culture=getRate(message.text))
    await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –æ—Ç 1 –¥–æ 5 –∫–∞–∫ –Ω–æ—á–Ω–æ–π/–º–æ–ª–æ–¥–µ–∂–Ω—ã–π –æ—Ç–¥—ã—Ö',
                         reply_markup=kb.add_rate_kb())
    await state.set_state(AddPlaceStates.night)


@router.message(F.text, AddPlaceStates.night)
async def start_night_process(message: Message, state: FSMContext):
    if not getRate(message.text):
        await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –æ—Ç 1 –¥–æ 5 –∫–∞–∫ –Ω–æ—á–Ω–æ–π/–º–æ–ª–æ–¥–µ–∂–Ω—ã–π –æ—Ç–¥—ã—Ö',
                         reply_markup=kb.add_rate_kb())
        return
    
    await state.update_data(night=getRate(message.text))

    data = await state.get_data()
    caption = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ: \n\n' \
              f'<b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>: {data.get("caption")}\n' \
              f'<b>–°–ø–æ—Ä—Ç</b>: {data.get("sport")}\n' \
              f'<b>–ö—É–ª—å—Ç—É—Ä–∞</b>: {data.get("culture")}\n' \
              f'<b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ</b>: {data.get("night")}'

    await message.answer_photo(photo=data.get('photo'), caption=caption, reply_markup=kb.add_place_check())
    await state.set_state(AddPlaceStates.check_state)


@router.message(AddPlaceStates.check_state, F.text == '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ')
async def confirm_add_note(message: Message, state: FSMContext):
    place = await state.get_data()
    await dao.add_place(placename=place.get("caption"), 
                        active_recreation=place.get("sport"),
                        cultural_event=place.get("culture"),
                        nightlife=place.get("night"),
                        file_id=place.get("photo"))
    await message.answer('–ú–µ—Å—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=kb.main_kb())
    await state.clear()


@router.message(AddPlaceStates.check_state, F.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
async def cancel_add_note(message: Message, state: FSMContext):
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', reply_markup=kb.main_kb())
    await state.clear()



@router.message(F.text == 'üéØ –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ')
@router.message(F.text == "üìã –¥–∞–≤–∞–π –¥–∞–ª—å—à–µ")
async def start_visit_check(message: Message, state: FSMContext):
    user_data = await state.get_data()
    offset = user_data.get("offset")
    if not offset:
        offset = 1
    data = await dao.get_place(offset=offset, user_id=message.from_user.id)
    await state.update_data(offset=offset+1)

    if not data:
        await state.update_data(offset=1)
        await message.answer('–í—Å–µ –º–µ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—å—Å—è —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑',
                              reply_markup=kb.main_visit_kb())
        return

    caption = f'–°—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å: \n\n' \
              f'<b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>: {data.placename}\n' \
              f'<b>–°–ø–æ—Ä—Ç</b>: {data.active_recreation}\n' \
              f'<b>–ö—É–ª—å—Ç—É—Ä–∞</b>: {data.cultural_event}\n' \
              f'<b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ</b>: {data.nightlife}'

    await state.update_data(place_id=data.id)
    await message.answer_photo(photo=data.img_id, caption=caption, reply_markup=kb.main_visit_kb())
    await state.set_state(CheckVisited.content)


@router.message(F.text == "üìù —Ö–æ—á—É –ø–æ—Å–µ—Ç–∏—Ç—å", CheckVisited.content)
async def start_set_visit_mark(message: Message, state: FSMContext):
    await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –æ—Ç 1 –¥–æ 5',
                         reply_markup=kb.add_rate_kb())
    await state.set_state(CheckVisited.sport)


@router.message(F.text, CheckVisited.sport)
async def start_set_visit_rate(message: Message, state: FSMContext):
    if not getRate(message.text):
        await message.answer('–û—Ü–µ–Ω–∏ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–µ—â–µ–Ω–∏—è –æ—Ç 1 –¥–æ 5',
                         reply_markup=kb.add_rate_kb())
        return
    
    place = await state.get_data()
    await dao.add_rate(user_id=message.from_user.id, 
                       place_id=place.get("place_id"),
                       rating=getRate(message.text))
    # await state.update_data(sport=getRate(message.text))
    await message.answer('–ù–∞–¥–µ—é—Å—å –≤–∞–º –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å...',
                         reply_markup=kb.main_kb())